/**
@defgroup Lua

@defgroup StringLibrary
@ingroup Lua

This library provides generic functions for string manipulation, such as finding and extracting substrings, and pattern matching. When indexing a string in Lua, the first character is at position 1 (not at 0, as in C). Indices are allowed to be negative and are interpreted as indexing backwards, from the end of the string. Thus, the last character is at position -1, and so on. <br>
<br>
The string library provides all its functions inside the table string. It also sets a metatable for strings where the __index field points to the string table. Therefore, you can use the string functions in object-oriented style. For instance, string.byte(s,i) can be written as s:byte(i). <br>
<br>
The string library assumes one-byte character encodings. <br>

@page my_StringLibraryByte byte
@ingroup StringLibrary
Returns the internal numerical codes of the characters s[i], s[i+1], ..., s[j]. The default value for i is 1; the default value for j is i. These indices are corrected following the same rules of function string.sub. <br>
<br>
Numerical codes are not necessarily portable across platforms. 
<br>[Lua API]<br>
@code
string.byte(s [, i [, j]])
@endcode

@page my_StringLibraryChar char
@ingroup StringLibrary
Receives zero or more integers. Returns a string with length equal to the number of arguments, in which each character has the internal numerical code equal to its corresponding argument. <br>
<br>
Numerical codes are not necessarily portable across platforms.
<br>[Lua API]<br>
@code
string.char(...)
@endcode

@page my_StringLibraryDump dump
@ingroup StringLibrary
Returns a string containing a binary representation of the given function, so that a later load on this string returns a copy of the function (but with new upvalues). 
<br>[Lua API]<br>
@code
string.dump(function)
@endcode

@page my_StringLibraryFind find
@ingroup StringLibrary
Looks for the first match of pattern in the string s. If it finds a match, then find returns the indices of s where this occurrence starts and ends; otherwise, it returns nil. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative. A value of true as a fourth, optional argument plain turns off the pattern matching facilities, so the function does a plain "find substring" operation, with no characters in pattern being considered magic. Note that if plain is given, then init must be given as well. <br>
<br>
If the pattern has captures, then in a successful match the captured values are also returned, after the two indices.
<br>[Lua API]<br>
@code
string.find(s, pattern [, init [, plain]])
@endcode

@page my_StringLibraryFormat format
@ingroup StringLibrary
[Lua API]<br>
@code
string.format(formatstring, ...)
@endcode
Returns a formatted version of its variable number of arguments following the description given in its first argument (which must be a string). The format string follows the same rules as the ANSI C function sprintf. The only differences are that the options/modifiers *, h, L, l, n, and p are not supported and that there is an extra option, q. The q option formats a string between double quotes, using escape sequences when necessary to ensure that it can safely be read back by the Lua interpreter. For instance, the call
<br>[Lua API]<br>
@code
string.format('%q', 'a string with "quotes" and \n new line')
@endcode
may produce the string:
<br>[Lua API]<br>
@code
"a string with \"quotes\" and \
      new line"
@endcode
Options A and a (when available), E, e, f, G, and g all expect a number as argument. Options c, d, i, o, u, X, and x also expect a number, but the range of that number may be limited by the underlying C implementation. For options o, u, X, and x, the number cannot be negative. Option q expects a string; option s expects a string without embedded zeros. If the argument to option s is not a string, it is converted to one following the same rules of tostring.


@page my_StringLibraryGmatch gmatch
@ingroup StringLibrary
[Lua API]<br>
@code
string.gmatch(s, pattern)
@endcode
Returns an iterator function that, each time it is called, returns the next captures from pattern over the string s. If pattern specifies no captures, then the whole match is produced in each call. <br>
<br>
As an example, the following loop will iterate over all the words from string s, printing one per line: 
<br>[Lua API]<br>
@code
	s = "hello world from Lua"
	for w in string.gmatch(s, "%a+") do
		print(w)
	end
@endcode
The next example collects all pairs key=value from the given string into a table:
<br>[Lua API]<br>
@code
	t = {}
	s = "from=world, to=Lua"
	for k, v in string.gmatch(s, "(%w+)=(%w+)") do
		t[k] = v
	end
@endcode
For this function, a caret '^' at the start of a pattern does not work as an anchor, as this would prevent the iteration. 

@page my_StringLibraryGsub gsub
@ingroup StringLibrary
Returns a copy of s in which all (or the first n, if given) occurrences of the pattern have been replaced by a replacement string specified by repl, which can be a string, a table, or a function. gsub also returns, as its second value, the total number of matches that occurred. The name gsub comes from Global SUBstitution. <br>
<br>
If repl is a string, then its value is used for replacement. The character % works as an escape character: any sequence in repl of the form %d, with d between 1 and 9, stands for the value of the d-th captured substring. The sequence %0 stands for the whole match. The sequence %% stands for a single %. <br>
<br>
If repl is a table, then the table is queried for every match, using the first capture as the key. <br>
<br>
If repl is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order. <br>
<br>
In any case, if the pattern specifies no captures, then it behaves as if the whole pattern was inside a capture. <br>
<br>
If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is false or nil, then there is no replacement (that is, the original match is kept in the string). 
<br>[Lua API]<br>
@code
string.gsub(s, pattern, repl [, n])
@endcode
Here are some examples:
<br>[Lua API]<br>
@code
	x = string.gsub("hello world", "(%w+)", "%1 %1")
	--> x="hello hello world world"
     
	x = string.gsub("hello world", "%w+", "%0 %0", 1)
	--> x="hello hello world"
     
	x = string.gsub("hello world from Lua", "(%w+)%s*(%w+)", "%2 %1")
	--> x="world hello Lua from"
     
	x = string.gsub("home = $HOME, user = $USER", "%$(%w+)", os.getenv)
	--> x="home = /home/roberto, user = roberto"
     
	x = string.gsub("4+5 = $return 4+5$", "%$(.-)%$", function (s)
			return load(s)()
		end)
	--> x="4+5 = 9"
     
	local t = {name="lua", version="5.2"}
	x = string.gsub("$name-$version.tar.gz", "%$(%w+)", t)
	--> x="lua-5.2.tar.gz"
@endcode

@page my_StringLibraryLen len
@ingroup StringLibrary
Receives a string and returns its length. The empty string "" has length 0. Embedded zeros are counted, so "a\000bc\000" has length 5. 
<br>[Lua API]<br>
@code
string.len(s)
@endcode

@page my_StringLibraryLower lower
@ingroup StringLibrary
Receives a string and returns a copy of this string with all uppercase letters changed to lowercase. All other characters are left unchanged. The definition of what an uppercase letter is depends on the current locale. 
<br>[Lua API]<br>
@code
string.lower(s)
@endcode

@page my_StringLibraryMatch match
@ingroup StringLibrary
Looks for the first match of pattern in the string s. If it finds one, then match returns the captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then the whole match is returned. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative.
<br>[Lua API]<br>
@code
string.match(s, pattern [, init])
@endcode

@page my_StringLibraryRep rep
@ingroup StringLibrary
Returns a string that is the concatenation of n copies of the string s separated by the string sep. The default value for sep is the empty string (that is, no separator).
<br>[Lua API]<br>
@code
string.rep(s, n [, sep])
@endcode

@page my_StringLibraryReverse reverse
@ingroup StringLibrary
Returns a string that is the string s reversed. 
<br>[Lua API]<br>
@code
string.reverse(s)
@endcode

@page my_StringLibrarySub sub
@ingroup StringLibrary
Returns the substring of s that starts at i and continues until j; i and j can be negative. If j is absent, then it is assumed to be equal to -1 (which is the same as the string length). In particular, the call string.sub(s,1,j) returns a prefix of s with length j, and string.sub(s, -i) returns a suffix of s with length i. <br>
<br>
If, after the translation of negative indices, i is less than 1, it is corrected to 1. If j is greater than the string length, it is corrected to that length. If, after these corrections, i is greater than j, the function returns the empty string. 
<br>[Lua API]<br>
@code
string.sub(s, i [, j])
@endcode

@page my_StringLibraryUpper upper
@ingroup StringLibrary
Receives a string and returns a copy of this string with all lowercase letters changed to uppercase. All other characters are left unchanged. The definition of what a lowercase letter is depends on the current locale.
<br>[Lua API]<br>
@code
string.upper(s)
@endcode

<H4>Character Class:</H4>
<P>A <EM>character class</EM> is used to represent a set of characters. The 
following combinations are allowed in describing a character class: 
<UL>
  <LI><B><EM>x</EM>: </B> (where <EM>x</EM> is not one of the <EM>magic 
  characters</EM> <CODE>^$()%.[]*+-?</CODE>) represents the character <EM>x</EM> 
  itself. </LI>
  <LI><B><CODE>.</CODE>: </B> (a dot) represents all characters.</LI>
  <LI><B><CODE>%a</CODE>: </B> represents all letters.</LI>
  <LI><B><CODE>%c</CODE>: </B> represents all control characters.</LI>
  <LI><B><CODE>%d</CODE>: </B> represents all digits.</LI>
  <LI><B><CODE>%g</CODE>: </B> represents all printable characters except 
  space.</LI>
  <LI><B><CODE>%l</CODE>: </B> represents all lowercase letters.</LI>
  <LI><B><CODE>%p</CODE>: </B> represents all punctuation characters.</LI>
  <LI><B><CODE>%s</CODE>: </B> represents all space characters.</LI>
  <LI><B><CODE>%u</CODE>: </B> represents all uppercase letters.</LI>
  <LI><B><CODE>%w</CODE>: </B> represents all alphanumeric characters.</LI>
  <LI><B><CODE>%x</CODE>: </B> represents all hexadecimal digits.</LI>
  <LI><B><CODE>%<EM>x</EM></CODE>: </B> (where <EM>x</EM> is any 
  non-alphanumeric character) represents the character <EM>x</EM>. This is the 
  standard way to escape the magic characters. Any punctuation character (even 
  the non magic) can be preceded by a '<CODE>%</CODE>' when used to represent 
  itself in a pattern. </LI>
  <LI><B><CODE>[<EM>set</EM>]</CODE>: </B> represents the class which is the 
  union of all characters in <EM>set</EM>. A range of characters can be 
  specified by separating the end characters of the range, in ascending order, 
  with a '<CODE>-</CODE>', All classes <CODE>%</CODE><EM>x</EM> described above 
  can also be used as components in <EM>set</EM>. All other characters in 
  <EM>set</EM> represent themselves. For example, <CODE>[%w_]</CODE> (or 
  <CODE>[_%w]</CODE>) represents all alphanumeric characters plus the 
  underscore, <CODE>[0-7]</CODE> represents the octal digits, and 
  <CODE>[0-7%l%-]</CODE> represents the octal digits plus the lowercase letters 
  plus the '<CODE>-</CODE>' character. 
  <P>The interaction between ranges and classes is not defined. Therefore, 
  patterns like <CODE>[%a-z]</CODE> or <CODE>[a-%%]</CODE> have no meaning. 
  </P></LI>
  <LI><B><CODE>[^<EM>set</EM>]</CODE>: </B> represents the complement of 
  <EM>set</EM>, where <EM>set</EM> is interpreted as above. </LI></UL>
<P>For all classes represented by single letters (<CODE>%a</CODE>, 
<CODE>%c</CODE>, etc.), the corresponding uppercase letter represents the 
complement of the class. For instance, <CODE>%S</CODE> represents all non-space 
characters. 
<P>The definitions of letter, space, and other character groups depend on the 
current locale. In particular, the class <CODE>[a-z]</CODE> may not be 
equivalent to <CODE>%l</CODE>. 
<H4>Pattern Item:</H4>
<P>A <EM>pattern item</EM> can be 
<UL>
  <LI>a single character class, which matches any single character in the class; 
  </LI>
  <LI>a single character class followed by '<CODE>*</CODE>', which matches 0 or 
  more repetitions of characters in the class. These repetition items will 
  always match the longest possible sequence; </LI>
  <LI>a single character class followed by '<CODE>+</CODE>', which matches 1 or 
  more repetitions of characters in the class. These repetition items will 
  always match the longest possible sequence; </LI>
  <LI>a single character class followed by '<CODE>-</CODE>', which also matches 
  0 or more repetitions of characters in the class. Unlike '<CODE>*</CODE>',
   these repetition items will always match the shortest possible sequence; 
</LI>
  <LI>a single character class followed by '<CODE>?</CODE>', which matches 0 or 
  1 occurrence of a character in the class; </LI>
  <LI><CODE>%<EM>n</EM></CODE>, for <EM>n</EM> between 1 and 9; such item 
  matches a substring equal to the <EM>n</EM>-th captured string (see below); 
  </LI>
  <LI><CODE>%b<EM>xy</EM></CODE>, where <EM>x</EM> and <EM>y</EM> are two 
  distinct characters; such item matches strings that start 
  with&nbsp;<EM>x</EM>, end with&nbsp;<EM>y</EM>, and where the <EM>x</EM> and 
  <EM>y</EM> are <EM>balanced</EM>. This means that, if one reads the string 
  from left to right, counting <EM>+1</EM> for an <EM>x</EM> and <EM>-1</EM> for 
  a <EM>y</EM>, the ending <EM>y</EM> is the first <EM>y</EM> where the count 
  reaches 0. For instance, the item <CODE>%b()</CODE> matches expressions with
   balanced parentheses. </LI>
  <LI><CODE>%f[<EM>set</EM>]</CODE>, a <EM>frontier pattern</EM>; such item 
  matches an empty string at any position such that the next character belongs 
  to <EM>set</EM> and the previous character does not belong to <EM>set</EM>.
   The set <EM>set</EM> is interpreted as previously described. The beginning 
  and the end of the subject are handled as if they were the character 
  '<CODE>\0</CODE>'. </LI></UL>
<H4>Pattern:</H4>
<P>A <EM>pattern</EM> is a sequence of pattern items. A caret '<CODE>^</CODE>' 
at the beginning of a pattern anchors the match at the beginning of the subject 
string. A '<CODE>$</CODE>' at the end of a pattern anchors the match at the end 
of the subject string. At other positions, '<CODE>^</CODE>' and '<CODE>$</CODE>' 
have no special meaning and represent themselves. 
<H4>Captures:</H4>
<P>A pattern can contain sub-patterns enclosed in parentheses; they describe 
<EM>captures</EM>. When a match succeeds, the substrings of the subject string
 that match captures are stored (<EM>captured</EM>) for future use. Captures are 
numbered according to their left parentheses. For instance, in the pattern "(a*(.)%w(%s*))", 
the part of the string matching "a*(.)%w(%s*)" is stored as the first capture (and therefore has number 1); 
the character matching "." is captured with number 2, and the part matching "%s*" has number 3.  
<P>As a special case, the empty capture () captures the current string position (a number). 
For instance, if we apply the pattern "()aa()" on the string "flaaap", there will be two captures: 3 and 5.
*/