/**
@defgroup Lua

@defgroup BasicLibrary
@ingroup Lua

@page my_BasicLibraryAssert assert
@ingroup BasicLibrary
Issues an error when the value of its argument v is false (i.e., nil or false); otherwise, returns all its arguments. message is an error message; when absent, it defaults to "assertion failed!"  <br>

@page my_BasicLibraryCollectGrabage collectgarbage
@ingroup BasicLibrary
This function is a generic interface to the garbage collector. It performs different functions according to its first argument, opt: <br>
<ul>
<li>"collect":  performs a full garbage-collection cycle. This is the default option.</li>
<li>"stop":  stops automatic execution of the garbage collector. The collector will run only when explicitly invoked, until a call to restart it.</li>
<li>"restart":  restarts automatic execution of the garbage collector.</li>
<li>"count":  returns the total memory in use by Lua (in Kbytes) and a second value with the total memory in bytes modulo 1024. The first value has a fractional part, so the following equality is always true.</li>
</ul>

(The second result is useful when Lua is compiled with a non floating-point type for numbers.) <br>

<ul>
<li>"step":  performs a garbage-collection step. The step "size" is controlled by arg (larger values mean more steps) in a non-specified way. If you want to control the step size you must experimentally tune the value of arg. Returns true if the step finished a collection cycle.</li>
<li>"setpause":  sets arg as the new value for the pause of the collector. Returns the previous value for pause.</li>
<li>"setstepmul":  sets arg as the new value for the step multiplier of the collector. Returns the previous value for step.</li>
<li>"isrunning":  returns a boolean that tells whether the collector is running (i.e., not stopped).</li>
<li>"generational":  changes the collector to generational mode. This is an experimental feature.</li>
<li>"incremental":  changes the collector to incremental mode. This is the default mode. </li>
</ul>
[Lua API]<br>
@code
k, b = collectgarbage("command")
@endcode

<br>Example Usage:<br>
[Lua API]<br>
@code
k, b = collectgarbage("count")
assert(k*1024 == math.floor(k)*1024 + b)
@endcode

@page my_BasicLibraryDoFile dofile
@ingroup BasicLibrary
Opens the named file and executes its contents as a Lua chunk. When called without arguments, dofile executes the contents of the standard input (stdin). Returns all values returned by the chunk. In case of errors, dofile propagates the error to its caller (that is, dofile does not run in protected mode). <br>
[Lua API]<br>
@code
dofile("fileName")
@endcode

@page my_BasicLibraryError error
@ingroup BasicLibrary
Terminates the last protected function called and returns message as the error message. Function error never returns. <br><br>
Usually, error adds some information about the error position at the beginning of the message, if the message is a string. The level argument specifies how to get the error position. With level 1 (the default), the error position is where the error function was called. Level 2 points the error to where the function that called error was called; and so on. Passing a level 0 avoids the addition of error position information to the message. <br>
[Lua API]<br>
@code
error(message [, level])
@endcode

@page my_BasicLibrary_G _G
@ingroup BasicLibrary
A global variable (not a function) that holds the global environment. Lua itself does not use this variable; changing its value does not affect any environment, nor vice-versa. 

@page my_BasicLibraryGetMetatable getmetatable
@ingroup BasicLibrary
If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a "__metatable" field, returns the associated value. Otherwise, returns the metatable of the given object. <br>
[Lua API]<br>
@code
getmetatable(object)
@endcode

@page my_BasicLibraryIpairs ipairs
@ingroup BasicLibrary
If object does not have a metatable, returns nil. Otherwise, if the object's metatable has a "__metatable" field, returns the associated value. Otherwise, returns the metatable of the given object. 
Otherwise, returns three values: an iterator function, the table t, and 0, so that the construction <br>
for i,v in ipairs(t) do body end<br>
<br>
will iterate over the pairs (1,t[1]), (2,t[2]), ..., up to the first integer key absent from the table.<br>
[Lua API]<br>
@code
ipairs(t)
@endcode

@page my_BasicLibraryLoad load
@ingroup BasicLibrary
Loads a chunk. <br>
<br>
If ld is a string, the chunk is this string. If ld is a function, load calls it repeatedly to get the chunk pieces. Each call to ld must return a string that concatenates with previous results. A return of an empty string, nil, or no value signals the end of the chunk. <br>
<br>
If there are no syntactic errors, returns the compiled chunk as a function; otherwise, returns nil plus the error message. <br>
<br>
If the resulting function has upvalues, the first upvalue is set to the value of env, if that parameter is given, or to the value of the global environment. (When you load a main chunk, the resulting function will always have exactly one upvalue, the _ENV variable. When you load a binary chunk created from a function (see string.dump), the resulting function can have arbitrary upvalues.) <br>
<br>
source is used as the source of the chunk for error messages and debug information. When absent, it defaults to ld, if ld is a string, or to "=(load)" otherwise. <br>
<br>
The string mode controls whether the chunk can be text or binary (that is, a precompiled chunk). It may be the string "b" (only binary chunks), "t" (only text chunks), or "bt" (both binary and text). The default is "bt". <br>

[Lua API]<br>
@code
load(ld [, source [, mode [, env]]])
@endcode

@page my_BasicLibraryLoadFile loadfile
@ingroup BasicLibrary
Similar to load, but gets the chunk from file filename or from the standard input, if no file name is given. <br>
[Lua API]<br>
@code
loadfile([filename [, mode [, env]]])
@endcode

@page my_BasicLibraryNext next
@ingroup BasicLibrary
Allows a program to traverse all fields of a table. Its first argument is a table and its second argument is an index in this table. next returns the next index of the table and its associated value. When called with nil as its second argument, next returns an initial index and its associated value. When called with the last index, or with nil in an empty table, next returns nil. If the second argument is absent, then it is interpreted as nil. In particular, you can use next(t) to check whether a table is empty. <br>
 <br>
The order in which the indices are enumerated is not specified, even for numeric indices. (To traverse a table in numeric order, use a numerical for.)  <br>
 <br>
The behavior of next is undefined if, during the traversal, you assign any value to a non-existent field in the table. You may however modify existing fields. In particular, you may clear existing fields.  <br>
[Lua API]<br>
@code
next(table [, index])
@endcode

@page my_BasicLibraryPairs pairs
@ingroup BasicLibrary
If t has a metamethod __pairs, calls it with t as argument and returns the first three results from the call. <br>
<br>
Otherwise, returns three values: the next function, the table t, and nil, so that the construction <br>
for k,v in pairs(t) do body end<br>
<br>
will iterate over all keyâ€“value pairs of table t. <br>
<br>
See function next for the caveats of modifying the table during its traversal. <br>
[Lua API]<br>
@code
pairs (t)
@endcode

@page my_BasicLibraryPcall pcall
@ingroup BasicLibrary
Calls function f with the given arguments in protected mode. This means that any error inside f is not propagated; instead, pcall catches the error and returns a status code. Its first result is the status code (a boolean), which is true if the call succeeds without errors. In such case, pcall also returns all results from the call, after this first result. In case of any error, pcall returns false plus the error message. <br>
[Lua API]<br>
@code
pcall(f [, arg1, ...])
@endcode

@page my_BasicLibraryPrint print
@ingroup BasicLibrary
Receives any number of arguments and prints their values to stdout, using the tostring function to convert each argument to a string. print is not intended for formatted output, but only as a quick way to show a value, for instance for debugging. For complete control over the output, use string.format and io.write. <br>
[Lua API]<br>
@code
print(...)
@endcode

@page my_BasicLibraryRawEqual rawequal
@ingroup BasicLibrary
Checks whether v1 is equal to v2, without invoking any metamethod. Returns a boolean. <br>
[Lua API]<br>
@code
rawequal(v1, v2)
@endcode

@page my_BasicLibraryRawget rawget
@ingroup BasicLibrary
Gets the real value of table[index], without invoking any metamethod. table must be a table; index may be any value. <br>
[Lua API]<br>
@code
rawget(table, index)
@endcode

@page my_BasicLibraryRawlen rawglen
@ingroup BasicLibrary
Sets the real value of table[index] to value, without invoking any metamethod. table must be a table, index any value different from nil and NaN, and value any Lua value. <br>
This function returns table. <br>
[Lua API]<br>
@code
rawlen(v)
@endcode

@page my_BasicLibraryRawset rawset
@ingroup BasicLibrary
Sets the real value of table[index] to value, without invoking any metamethod. table must be a table, index any value different from nil and NaN, and value any Lua value. <br>
This function returns table.<br>
[Lua API]<br>
@code
rawset(table, index, value)
@endcode

@page my_BasicLibrarySelect select
@ingroup BasicLibrary
If index is a number, returns all arguments after argument number index; a negative number indexes from the end (-1 is the last argument). Otherwise, index must be the string "#", and select returns the total number of extra arguments it received. <br>
[Lua API]<br>
@code
select(index, ...)
@endcode

@page my_BasicLibrarySetMetatable setmetatable
@ingroup BasicLibrary
Sets the metatable for the given table. (You cannot change the metatable of other types from Lua, only from C.) If metatable is nil, removes the metatable of the given table. If the original metatable has a "__metatable" field, raises an error. <br>
<br>
This function returns table. <br>
[Lua API]<br>
@code
setmetatable(table, metatable)
@endcode

@page my_BasicLibraryToNumber tonumber
@ingroup BasicLibrary
When called with no base, tonumber tries to convert its argument to a number. If the argument is already a number or a string convertible to a number, then tonumber returns this number; otherwise, it returns nil. <br>
<br>
When called with base, then e should be a string to be interpreted as an integer numeral in that base. The base may be any integer between 2 and 36, inclusive. In bases above 10, the letter 'A' (in either upper or lower case) represents 10, 'B' represents 11, and so forth, with 'Z' representing 35. If the string e is not a valid numeral in the given base, the function returns nil. <br>
<br>
This function returns table. <br>
[Lua API]<br>
@code
tonumber(e [, base])
@endcode

@page my_BasicLibraryToString tostring
@ingroup BasicLibrary
Receives a value of any type and converts it to a string in a reasonable format. (For complete control of how numbers are converted, use string.format.) <br>
If the metatable of v has a "__tostring" field, then tostring calls the corresponding value with v as argument, and uses the result of the call as its result. <br>
[Lua API]<br>
@code
tostring(v)
@endcode

@page my_BasicLibraryType type
@ingroup BasicLibrary
Returns the type of its only argument, coded as a string. The possible results of this function are "nil" (a string, not the value nil), "number", "string", "boolean", "table", "function", "thread", and "userdata". <br>
[Lua API]<br>
@code
type(v)
@endcode

@page my_BasicLibraryVersion version
@ingroup BasicLibrary
A global variable (not a function) that holds a string containing the current interpreter version. The current contents of this variable is "Lua 5.2".<br>
[Lua API]<br>
@code
_VERSION
@endcode

@page my_BasicLibraryXPcall xpcall
@ingroup BasicLibrary
This function is similar to pcall, except that it sets a new message handler msgh.<br>
[Lua API]<br>
@code
xpcall(f, msgh [, arg1, ...])
@endcode
*/