/**
@defgroup Tutorials

There are some tutorials start Lightfield2 game engine programming.
*/


/**
@defgroup FirstStep
@ingroup Tutorials

Lua is the most popular and lightweight scripting system supported in Lightfield 2 game engine. Lua is productive and easy to learn language for game logic.<br>
<br>
<a target = "_blank" href="http://www.lua.org/manual/5.2/"><b>Lua language reference</b></a><br>
<a target = "_blank" href="http://notepad-plus-plus.org/"><b>Recommended code editor Notepad++<b></a> (Lightfield3 will include complete editor)
*/


/**
@defgroup HelloWorld
@ingroup Tutorials

Let's start game programming and write a message!<br><br>
[Lua example]<br>
@code
function LFGame:OnInitGame()
	LFLogger:WriteOutput("Hello world!")
end
@endcode
*/


/**
@defgroup PlayAudio
@ingroup Tutorials

Play background music and sfx with touch event!<br><br>
[Lua example]<br>
@code  
function LFGame:OnInitGame()
	--LFAudio:SetVolumeOn("CH_MUSIC", true) --override config options
	--LFAudio:SetVolume("CH_MUSIC", 99) --override config options
	LFAudio:Play("CH_MUSIC", "Test/music.ogg")
end

function LFInput:OnPointerPressed(pointer, posX, posY)
	--LFAudio:SetVolumeOn("CH_SFX", true) --override config options
	--LFAudio:SetVolume("CH_SFX", 99) --override config options
	LFAudio:Play("CH_SFX", "Test/sfx.wav")
end
@endcode
*/


/**
@defgroup Events
@ingroup Tutorials

Which events can you use in the game?<br><br>
[Lua example]<br>
@code
function LFGame:OnInitGame()
end

function LFGame:OnTerminateGame()
end


function LFInput:OnPointerPressed(pointer, posX, posY)
end

function LFInput:OnPointerReleased(pointer, posX, posY)
end


function LFInput:OnButtonPressed(button)
end

function LFInput:OnButtonReleased(button)
end


function LFInput:OnControlPressed(sender)
end
@endcode
*/


/**
@defgroup EventExamples
@ingroup Tutorials

Some examples how can you use these.<br><br>
[Lua example]<br>
@code
function LFInput:OnPointerPressed(pointer, posX, posY)
	LFLogger:WriteOutput(pointer .. " pressed" .. " x:" .. posX .. ", y:" .. posY)
end

function LFInput:OnPointerReleased(pointer, posX, posY)
	LFLogger:WriteOutput(pointer .. " released" .. " x:" .. posX .. ", y:" .. posY)
end

function LFInput:OnButtonPressed(button)
	LFLogger:WriteOutput(button .. " button pressed")
end

function LFInput:OnButtonReleased(button)
	LFLogger:WriteOutput(button .. " button released")
	
	if button == "BT_BACK" then
		LFGame:Exit()
	end
end

function LFInput:OnControlPressed(sender)
	LFLogger:WriteOutput(sender:GetName())
end
@endcode
*/


/**
@defgroup Controls
@ingroup Tutorials

Do you need button, slider etc.? This tutorial shows you game controls.<br><br>
[Lua example]<br>
@code
LFScript:LoadScript("Material/FontMaterial")
LFScript:LoadScript("Material/ControlMaterial")
LFScript:LoadScript("Test/Material/MenuMaterial")

msgBack = nil
msgNewGame = nil

menuScreen = nil
menuScreen2 = nil

function LFGame:OnInitGame()
	--[[ 
	background
	--]]
	background = LFSprite.New(menuMaterial, {}, {name = "background"})
	
	--[[ 
	LFLabelControl
	--]]
	lblLorem = LFLabelControl.New(fontMaterial, {name = "lblLorem", posX = 100, posY = 0, text = "PRESS SOUND UP BUTTON!"}) --lblLorem = LFLabelControl.New(fontMaterial, {name = "lblLorem", posX = 0, posY = 0, text = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"})
	lblCat = LFLabelControl.New(fontMaterial, {name = "lblCat", posX = 50, posY = 20, text = "ITS WORKING GOOD...!?"}) --lblCat = LFLabelControl.New(fontMaterial, {name = "lblCat", posX = 0, posY = 20, text = "1234567890: .!?"})
	
	--[[ 
	LFNumberLabelControl
	--]]
	numlblScore = LFNumberLabelControl.New(fontMaterial, {name = "numlblScore", posX = 0, posY = 40, value = 2, digits = 4})	
	LFLogger:WriteOutput("value = " .. numlblScore:GetValue())
	numlblScore:SetValue(198676)
	LFLogger:WriteOutput("value = " .. numlblScore:GetValue())
	
	--[[ 
	LFLabelFPSControl
	--]]
	fontMaterial.textureWidth = 40
	fontMaterial.textureHeight = 60
	lblFPS = LFLabelFPSControl.New(fontMaterial, {name = "FPS", posX = 620, posY = 550})
	
	--[[ 
	LFLevelLabelControl
	--]]
	fontMaterial.textureWidth = 28
	fontMaterial.textureHeight = 45
	lblLevel = LFLevelLabelControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["level"], {name = "lblLevel", posX = 100, posY = 200, value = 225, digits = 3})
	
	--[[ 
	LFTimeLabelControl
	--]]
	lblTime = LFTimeLabelControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["timer"], {name = "lblTime", posX = 100, posY = 300, digits = 3},
		{minTime = 0, maxTime = 10, interval = 1, isIncrement = false})
	
	--[[ 
	LFButtonControl
	--]]
	btnBack = LFButtonControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["back"], controlMaterial.atlas["backTouched"], 
		{name = "btnBack", posX = 100, posY = 100, text = ""})
	
	fontMaterial.textureWidth = 60
	fontMaterial.textureHeight = 60
	btnExit = LFButtonControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["button"], controlMaterial.atlas["buttonTouched"], 
		{name = "btnExit", posX = 50, posY = 450, text = "EXIT"})
		
	btnTest = LFButtonControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["button"], controlMaterial.atlas["buttonTouched"], 
		{name = "btnTest", posX = 210, posY = 100, text = "TEST"})
	
	--[[
	LFCheckButtonControl
	--]]
	chkMusic = LFCheckButtonControl.New(controlMaterial, 
		controlMaterial.atlas["musicOff"], controlMaterial.atlas["musicOn"], controlMaterial.atlas["musicOffTouched"], controlMaterial.atlas["musicOnTouched"],
		{name = "chkMusic", posX = 300, posY = 200, isChecked = false})
	
	--[[
	LFSlider
	--]]
	controlMaterial.textureWidth = 100
	controlMaterial.textureHeight = 100
	sliderMusic = LFSliderControl.New(controlMaterial, controlMaterial.atlas["potmeter"], controlMaterial.atlas["potmeterTouched"],
		{name = "sliderMusic", posX = 420, posY = 200, width = 300, value = 100})
		
	--[[
	LFMessageBoxControl
	--]]
	fontMaterial.textureWidth = 25
	fontMaterial.textureHeight = 45
		
	mboxTimeInfo = LFMessageBoxControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["messageBox"], controlMaterial.atlas["messageButton"], controlMaterial.atlas["messageButtonTouched"],
		{name = "mboxTimeInfo", messageLine1 = "", messageLine2 = "TIME OUT!", messageLine3 = "", messageType = "info"})
	mboxTimeInfo:SetIsVisible(false)
	
	mboxExit = LFMessageBoxControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["messageBox"], controlMaterial.atlas["messageButton"], controlMaterial.atlas["messageButtonTouched"],
		{name = "mboxExit", messageLine1 = "DO YOU WANT", messageLine2 = "TO EXIT", messageLine3 = "FROM GAME?", messageType = "question"})
	
	layer = LFLayer.New("layer")
	layer:Add2dObject(background)
	layer:Add2dObject(lblLorem)
	layer:Add2dObject(lblCat)
	layer:Add2dObject(numlblScore)
	layer:Add2dObject(lblFPS)
	layer:Add2dObject(lblLevel)
	layer:Add2dObject(lblTime)
	layer:Add2dObject(btnBack)
	layer:Add2dObject(btnExit)
	layer:Add2dObject(btnTest)
	layer:Add2dObject(chkMusic)
	layer:Add2dObject(sliderMusic)
	layer:WriteComponentNames()
	
	layerMboxes = LFLayer.New("layerMsgBoxes")
	layerMboxes:Add2dObject(mboxTimeInfo)
	layerMboxes:Add2dObject(mboxExit)
	mboxTimeInfo:SetIsVisible(false)
	mboxExit:SetIsVisible(false)
	layerMboxes:WriteComponentNames()
	
	menuScreen = LFScreen.New("MenuScreen")
	menuScreen:AddLayer(layer)
	menuScreen:AddLayer(layerMboxes)
	layerMboxes:SetIsVisible(false)
	menuScreen:WriteLayerNames()
	
	LFSceneGraph:AddScreen(menuScreen)
	LFSceneGraph:WriteScreenNames()
	
	btnBack2 = LFButtonControl.New(fontMaterial, controlMaterial, controlMaterial.atlas["back"], controlMaterial.atlas["backTouched"], 
		{name = "btnBack2", posX = 100, posY = 100, text = ""})
	layer2 = LFLayer.New("layer2")
	layer2:Add2dObject(btnBack2)
	layer2:WriteComponentNames()
	menuScreen2 = LFScreen.New("MenuScreen2")
	menuScreen2:AddLayer(layer2)
	menuScreen2:WriteLayerNames()
	LFSceneGraph:AddScreen(menuScreen2)
	LFSceneGraph:WriteScreenNames()
end

function LFInput:OnButtonReleased(button)
	if (button == "BT_BACK") then
		LFGame:Exit()
	end
end

function LFInput:OnControlPressed(sender)
	LFLogger:WriteOutput(sender:GetName())
	
	if (sender:GetName() == "btnExit") then
		mboxExit:SetIsVisible(true)
		layerMboxes:SetIsVisible(true)
	end
	
	if (sender:GetName() == "btnTest") then
		chkMusic = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("chkMusic")
		chkMusic:SetIsChecked(not chkMusic:GetIsChecked())
		
		sliderMusic = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("sliderMusic")
		sliderMusic:SetValue(50)
		LFLogger:WriteOutput("slider value " .. tostring(sliderMusic:GetValue()))
	end
	
	if (sender:GetName() == "btnBack") then
		menuScreen2:SetActive()
	end
	
	if (sender:GetName() == "btnBack2") then
		menuScreen:SetActive()
	end
	
	if (sender:GetName() == "mboxExitYes") then
		LFGame:Exit()
	end
	
	if (sender:GetName() == "mboxExitNo") then
		mboxExit:SetIsVisible(false)
		layerMboxes:SetIsVisible(false)
	end
	
	if (sender:GetName() == "mboxTimeInfoOk") then
		mboxTimeInfo:SetIsVisible(false)
		layerMboxes:SetIsVisible(false)
	end
end

function LFTimeLabelControl:OnTick(sender)
	LFLogger:WriteOutput("Time out. " .. sender:GetName())
	mboxTimeInfo:SetIsVisible(true)
	layerMboxes:SetIsVisible(true)
	
	sender:Reset()
	sender:Start()
end

function LFCheckButtonControl:OnCheckChanged(sender)
	LFLogger:WriteOutput(sender:GetName() .. " OnCheckChanged " .. tostring(sender:GetIsChecked()))
end

function LFSliderControl:OnValueChanged(sender)
	LFLogger:WriteOutput(sender:GetName() .. " OnValueChanged " .. tostring(sender:GetValue()))
	
	lblLorem = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("lblLorem")
		if (lblLorem ~= nil) then
			LFLogger:WriteOutput(lblLorem:GetName() .. " delete")
			lblLorem:SetIsAlive(false)
		end
		
		numlblScore = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("numlblScore")
		score = numlblScore:GetValue()
		numlblScore:SetValue(score + 50)
		LFLogger:WriteOutput("value = " .. numlblScore:GetValue())
		
		lblLevel = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("lblLevel")
		level = lblLevel:GetValue()
		lblLevel:SetValue(level + 1)
		LFLogger:WriteOutput("value = " .. lblLevel:GetValue())
		
		lblTime = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("lblTime")
		lblTime:Start()
end
@endcode
*/

/**
@defgroup SceneGraph
@ingroup Tutorials

This tutorial shows how can build the complete game scene.<br><br>
[Lua example]<br>
@code
LFScript:LoadScript("Test/Material/ArrowMaterial")
LFScript:LoadScript("Test/Material/DukeMaterial")
LFScript:LoadScript("Test/Material/BeeMaterial")

function LFGame:OnInitGame()
	sprite0 = LFSprite.New(beeMaterial, beeMaterial.atlas["flying"], {name = "sprite0", posX = 300, posY = 300})
	sprite1 = LFSprite.New(arrowMaterial, {}, {name = "sprite1"})
	sprite2 = LFSprite.New(arrowMaterial, {}, {name = "sprite2", posX = 0, posY = 300})
	sprite3 = LFSprite.New(arrowMaterial, {}, {name = "sprite3", posY = 0, posX = 400})
	
	dukeMaterial.textureWidth = 100
	dukeMaterial.textureHeight = 150
	sprite4 = LFSprite.New(dukeMaterial, {}, {name = "sprite4", posX = 400, posY = 300})
	
	dukeMaterial.textureWidth = 200
	dukeMaterial.textureHeight = 200
	sprite5 = LFSprite.New(dukeMaterial, {}, {name = "sprite5", posX = 500, posY = 400})
	
	sprite6 = LFSprite.New(beeMaterial, beeMaterial.atlas["attack"], {name = "sprite6", posX = 10, posY = 10})
	
	layer = LFLayer.New("layer")
	layer:Add2dObject(sprite0)
	layer:Add2dObject(sprite1)
	layer:Add2dObject(sprite2)
	layer:Add2dObject(sprite3)
	layer:Add2dObject(sprite4)
	layer:Add2dObject(sprite5)
	layer:Add2dObject(sprite6)
	layer:WriteComponentNames()
	
	menuScreen = LFScreen.New("MenuScreen")
	menuScreen:AddLayer(layer)
	menuScreen:WriteLayerNames()
	
	LFSceneGraph:AddScreen(menuScreen)
	LFSceneGraph:WriteScreenNames()
end

function LFInput:OnPointerReleased(pointer, posX, posY)
	sprite = LFSceneGraph:FindScreen("MenuScreen"):FindLayer("layer"):Find2dObject("sprite0")
	if  sprite ~= nil then
		sprite:SetIsAlive(false)
		sprite = nil
	end
	
	LFSceneGraph:WriteScreenNames()
	
	screen = LFSceneGraph:FindScreen("MenuScreen")
	screen:WriteLayerNames()
	
	layer = screen:FindLayer("layer")
	layer:WriteComponentNames()
	
	if layer:Find2dObject("sprite0") ~= nil then
		LFLogger:WriteOutput("layer:Find2dObject " .. layer:Find2dObject("sprite0"):GetName())
	end
end
@endcode
*/